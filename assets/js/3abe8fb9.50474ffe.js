"use strict";(self.webpackChunkkaggleapi_net=self.webpackChunkkaggleapi_net||[]).push([[521],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function g(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),c=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,s=g(e,["components","mdxType","originalType","parentName"]),p=c(n),m=o,d=p["".concat(i,".").concat(m)]||p[m]||u[m]||a;return n?r.createElement(d,l(l({ref:t},s),{},{components:n})):r.createElement(d,l({ref:t},s))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=m;var g={};for(var i in t)hasOwnProperty.call(t,i)&&(g[i]=t[i]);g.originalType=e,g[p]="string"==typeof e?e:o,l[1]=g;for(var c=2;c<a;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3810:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>g,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const a={id:"logging",title:"Logging"},l=void 0,g={unversionedId:"logging",id:"logging",title:"Logging",description:"The library provides a way to inject your own, custom API information logger. Logged messages are replicated one-to-one with all Kaggle API CLI messages. By default, no logging is performed.",source:"@site/docs/logging.md",sourceDirName:".",slug:"/logging",permalink:"/KaggleAPI-NET/docs/logging",draft:!1,tags:[],version:"current",frontMatter:{id:"logging",title:"Logging"},sidebar:"docs",previous:{title:"Authentication",permalink:"/KaggleAPI-NET/docs/authentication"},next:{title:"Proxy",permalink:"/KaggleAPI-NET/docs/proxy"}},i={},c=[{value:"ConsoleLogger",id:"consolelogger",level:2}],s={toc:c},p="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The library provides a way to inject your own, custom API information logger. Logged messages are replicated one-to-one with all Kaggle API CLI messages. By default, no logging is performed."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'var config = new KaggleConfiguration { username = "YourUsername", key = "YourKey" };\n\nvar api = new KaggleClient(new YourLogger());\napi.Authenticate(config, method: AuthenticationMethod.Direct);\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"IKaggleInformationLogger")," interface can be found ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/PetterPet01/KagglAPI-NET/blob/master/KagglAPI.Web/Interfaces/IKaggleInformationLogger.cs"},"here"),"."),(0,o.kt)("h2",{id:"consolelogger"},"ConsoleLogger"),(0,o.kt)("p",null,"We can create a simple console-based logger:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"using KaggleAPI.Web.Interfaces;\n\npublic class ConsoleLogger : IKaggleInformationLogger\n{\n    public void OnLog(string message)\n    {\n        Console.WriteLine(message);\n    }\n}\n")),(0,o.kt)("p",null,"And use it as is:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'var config = new KaggleConfiguration { username = "YourUsername", key = "YourKey" };\n\nvar api = new KaggleClient(new ConsoleLogger());\napi.Authenticate(config, method: AuthenticationMethod.Direct);\n')),(0,o.kt)("p",null,"This logger produces a simple console output similar to the Kaggle API CLI:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"Downloaded metadata to D:/Kaggle/dataset-metadata.json\n\nsuccessfully updated dataset metadata\n")))}u.isMDXComponent=!0}}]);