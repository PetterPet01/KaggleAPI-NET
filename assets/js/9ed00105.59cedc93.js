"use strict";(self.webpackChunkkaggleapi_net=self.webpackChunkkaggleapi_net||[]).push([[4],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(n),f=a,d=u["".concat(c,".").concat(f)]||u[f]||g[f]||i;return n?r.createElement(d,o(o({ref:t},s),{},{components:n})):r.createElement(d,o({ref:t},s))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=f;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},9733:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={id:"configuration",title:"Configuration"},o=void 0,l={unversionedId:"configuration",id:"configuration",title:"Configuration",description:"To configure the Kaggle API client functionality, the KaggleConfiguration class exists.",source:"@site/docs/configuration.md",sourceDirName:".",slug:"/configuration",permalink:"/KaggleAPI-NET/docs/configuration",draft:!1,tags:[],version:"current",frontMatter:{id:"configuration",title:"Configuration"},sidebar:"docs",previous:{title:"Error Handling",permalink:"/KaggleAPI-NET/docs/error_handling"},next:{title:"Authentication",permalink:"/KaggleAPI-NET/docs/authentication"}},c={},p=[{value:"HTTPClient Notes",id:"httpclient-notes",level:2}],s={toc:p},u="wrapper";function g(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"To configure the Kaggle API client functionality, the ",(0,a.kt)("inlineCode",{parentName:"p"},"KaggleConfiguration")," class exists."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'var config = new KaggleConfiguration { username = "YourUsername", key = "YourKey" };\n\nvar api = new KaggleClient(config);\n')),(0,a.kt)("p",null,"We won't cover every possible configuration in this part, head over to the specific guides for that in ",(0,a.kt)("a",{parentName:"p",href:"authentication"},"Authentication"),"."),(0,a.kt)("h2",{id:"httpclient-notes"},"HTTPClient Notes"),(0,a.kt)("p",null,"One important part of the configuration is the used HTTPClient. By default, every time a ",(0,a.kt)("inlineCode",{parentName:"p"},"KaggleClient")," is instantiated, a new ",(0,a.kt)("inlineCode",{parentName:"p"},"HttpClient")," is created in the background. For Web Applications that require a lot of different clients due to user based access tokens, it is ",(0,a.kt)("strong",{parentName:"p"},"not")," advised to create a new ",(0,a.kt)("inlineCode",{parentName:"p"},"HttpClient")," from scratch with every HTTP call. Instead, a default (static) ",(0,a.kt)("inlineCode",{parentName:"p"},"HttpClient")," should be used to create a new ",(0,a.kt)("inlineCode",{parentName:"p"},"KaggleClient")," with a new access token."),(0,a.kt)("p",null,"Consider the following HTTP Endpoint:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'HttpResponseMessage Get()\n{\n    var config = new KaggleConfiguration { username = "YourUsername", key = "YourKey" };\n\n    var api = new KaggleClient(); \n    api.Authenticate(config);\n}\n')),(0,a.kt)("p",null,"This creates a new ",(0,a.kt)("inlineCode",{parentName:"p"},"HttpClient")," every time a request is made, which can be quite bad for the performance. Instead, we should use a static HttpClient:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'// somewhere global/static\npublic static HttpClient httpClient = new HttpClient();\n\nHttpResponseMessage Get()\n{\n    var config = new KaggleConfiguration { username = "YourUsername", key = "YourKey" };\n\n    var api = new KaggleClient();\n    api.Authenticate(httpClient, config);\n}\n')),(0,a.kt)("p",null,"This way, a single ",(0,a.kt)("inlineCode",{parentName:"p"},"HttpClient")," will be used."))}g.isMDXComponent=!0}}]);